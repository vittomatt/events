version: '3.8'

services:
    ############
    # Services #
    ############

    app-users:
        build:
            context: .
            dockerfile: docker/users-dockerfile
        container_name: users
        environment:
            - USERS_POSTGRES_DB_SHARD_1_HOST=db-users-shard-1
            - USERS_POSTGRES_DB_SHARD_1_PORT=5432
            - USERS_POSTGRES_DB_SHARD_2_HOST=db-users-shard-2
            - USERS_POSTGRES_DB_SHARD_2_PORT=5432
            - REDIS_HOST=redis
            - AWS_SNS_ENDPOINT=http://localstack:4566
            - AWS_SQS_ENDPOINT=http://localstack:4566
            - AWS_EVENT_BRIDGE_ENDPOINT=http://localstack:4566
            - SQS_USER_CREATED_QUEUE_URL=http://localstack:4566/000000000000/videomatt_users_1_event_user_created
            - SQS_VIDEO_CREATED_QUEUE_URL=http://localstack:4566/000000000000/videomatt_videos_1_event_video_created
        ports:
            - '${USERS_PORT}:${USERS_PORT}'
        volumes:
            - .:/app
            - /app/node_modules
            - /app/dist
            - ${HOME}/.aws:/root/.aws:ro
        networks:
            - videonet
        depends_on:
            db-users-shard-1:
                condition: service_healthy
            db-users-shard-2:
                condition: service_healthy
            redis:
                condition: service_healthy
            localstack:
                condition: service_healthy
    app-videos:
        build:
            context: .
            dockerfile: docker/videos-dockerfile
        container_name: videos
        environment:
            - VIDEOS_POSTGRES_DB_HOST=db-videos
            - VIDEOS_POSTGRES_DB_PORT=5432
            - VIDEOS_POSTGRES_DB_REPLICA_HOST=db-videos-replica
            - VIDEOS_POSTGRES_DB_REPLICA_PORT=5432
            - VIDEOS_COMMENT_MONGO_DB_HOST=db-video-comments-router
            - REDIS_HOST=redis
            - AWS_SNS_ENDPOINT=http://localstack:4566
            - AWS_SQS_ENDPOINT=http://localstack:4566
            - AWS_EVENT_BRIDGE_ENDPOINT=http://localstack:4566
            - SQS_USER_CREATED_QUEUE_URL=http://localstack:4566/000000000000/videomatt_users_1_event_user_created
            - SQS_VIDEO_CREATED_QUEUE_URL=http://localstack:4566/000000000000/videomatt_videos_1_event_video_created
        ports:
            - '${VIDEOS_PORT}:${VIDEOS_PORT}'
        volumes:
            - .:/app
            - /app/node_modules
            - /app/dist
            - ${HOME}/.aws:/root/.aws:ro
        networks:
            - videonet
        depends_on:
            db-videos:
                condition: service_healthy
            db-video-comments-router:
                condition: service_healthy
            redis:
                condition: service_healthy
            localstack:
                condition: service_healthy

    ############
    # Users DB #
    ############

    db-users-shard-1:
        image: postgres:15-alpine
        container_name: postgres-users-shard-1
        restart: unless-stopped
        environment:
            - POSTGRES_USER=${USERS_POSTGRES_DB_SHARD_1_USER}
            - POSTGRES_PASSWORD=${USERS_POSTGRES_DB_SHARD_1_PASSWORD}
            - POSTGRES_DB=${USERS_POSTGRES_DB_SHARD_1_NAME}
        ports:
            - '${USERS_POSTGRES_DB_SHARD_1_PORT}:5432'
        volumes:
            - db_data_users_shard_1:/var/lib/postgresql/data
        networks:
            - videonet
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'pg_isready -U ${USERS_POSTGRES_DB_SHARD_1_USER} -d ${USERS_POSTGRES_DB_SHARD_1_NAME} -h localhost || exit 1',
                ]
            interval: 5s
            timeout: 3s
            retries: 3
            start_period: 30s
    db-users-shard-2:
        image: postgres:15-alpine
        container_name: postgres-users-shard-2
        restart: unless-stopped
        environment:
            - POSTGRES_USER=${USERS_POSTGRES_DB_SHARD_2_USER}
            - POSTGRES_PASSWORD=${USERS_POSTGRES_DB_SHARD_2_PASSWORD}
            - POSTGRES_DB=${USERS_POSTGRES_DB_SHARD_2_NAME}
        ports:
            - '${USERS_POSTGRES_DB_SHARD_2_PORT}:5432'
        volumes:
            - db_data_users_shard_2:/var/lib/postgresql/data
        networks:
            - videonet
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'pg_isready -U ${USERS_POSTGRES_DB_SHARD_2_USER} -d ${USERS_POSTGRES_DB_SHARD_2_NAME} -h localhost || exit 1',
                ]
            interval: 5s
            timeout: 3s
            retries: 3
            start_period: 30s

    #############
    # Videos DB #
    #############

    db-videos:
        image: postgres:15-alpine
        container_name: postgres-videos
        restart: unless-stopped
        environment:
            - POSTGRES_USER=${VIDEOS_POSTGRES_DB_USER}
            - POSTGRES_PASSWORD=${VIDEOS_POSTGRES_DB_PASSWORD}
            - POSTGRES_DB=${VIDEOS_POSTGRES_DB_NAME}
            - DB_REPLICA_USER=${VIDEOS_POSTGRES_DB_REPLICA_USER}
            - DB_REPLICA_PASSWORD=${VIDEOS_POSTGRES_DB_REPLICA_PASSWORD}
        ports:
            - '${VIDEOS_POSTGRES_DB_PORT}:5432'
        volumes:
            - db_data_videos:/var/lib/postgresql/data
            - ./docker/postgres/replica-init.sh:/docker-entrypoint-initdb.d/replica-init.sh:ro
        networks:
            - videonet
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'pg_isready -U ${VIDEOS_POSTGRES_DB_USER} -d ${VIDEOS_POSTGRES_DB_NAME} -h localhost || exit 1',
                ]
            interval: 5s
            timeout: 3s
            retries: 3
            start_period: 30s
    db-videos-replica:
        image: postgres:15-alpine
        container_name: postgres-videos-replica
        restart: unless-stopped
        command: ['/bin/sh', '-c', './docker/replica-setup.sh && docker-entrypoint.sh postgres']
        environment:
            - POSTGRES_USER=${VIDEOS_POSTGRES_DB_REPLICA_USER}
            - POSTGRES_PASSWORD=${VIDEOS_POSTGRES_DB_REPLICA_PASSWORD}
            - DB_HOST=db-videos
            - DB_REPLICA_USER=${VIDEOS_POSTGRES_DB_REPLICA_USER}
            - DB_REPLICA_PASSWORD=${VIDEOS_POSTGRES_DB_REPLICA_PASSWORD}
            - PGDATA=/var/lib/postgresql/data/pgdata
        ports:
            - '${VIDEOS_POSTGRES_DB_REPLICA_PORT}:5432'
        volumes:
            - db_data_videos_replica:/var/lib/postgresql/data/pgdata
            - ./docker/postgres/replica-setup.sh:/docker/replica-setup.sh:ro
        networks:
            - videonet
        depends_on:
            db-videos:
                condition: service_healthy
        healthcheck:
            test: >
                CMD-SHELL
                pg_isready -U ${VIDEOS_POSTGRES_DB_REPLICA_USER} -d ${VIDEOS_POSTGRES_DB_NAME:-postgres} -h localhost &&
                psql -U ${VIDEOS_POSTGRES_DB_REPLICA_USER} -d ${VIDEOS_POSTGRES_DB_NAME:-postgres} \
                    -c 'SELECT pg_is_in_recovery()' | grep -q t
            interval: 5s
            timeout: 3s
            retries: 3
            start_period: 30s

    ##########
    # Others #
    ##########

    redis:
        image: redis:alpine
        container_name: redis
        restart: unless-stopped
        ports:
            - '${REDIS_PORT}:6379'
        volumes:
            - redis_data:/data
        networks:
            - videonet
    localstack:
        container_name: localstack
        image: localstack/localstack
        restart: unless-stopped
        ports:
            - '4566:4566'
            - '4510-4559:4510-4559'
        environment:
            - SERVICES=events,sqs,sns
            - DEBUG=true
        volumes:
            - localstack_data:/var/lib/localstack
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - videonet

    ###############
    # Comments DB #
    ###############

    db-mongo-config-server:
        image: mongo:7.0
        container_name: db-mongo-config-server
        hostname: db-mongo-config-server
        entrypoint: ['bash', '/docker/mongo/entrypoint.sh']
        volumes:
            - db_mongo_config_server:/data/configdb
            - ./docker/mongo/mongo-keyfile:/etc/mongo-keyfile:ro
            - ./docker/mongo/entrypoint.sh:/docker/mongo/entrypoint.sh:ro
        ports:
            - '27018:27018'
        networks:
            - videonet
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    "mongosh --host localhost --port 27018 -u root -p password --authenticationDatabase admin --eval 'rs.status().myState' --quiet | grep 1",
                ]
            interval: 5s
            timeout: 5s
            retries: 10
    db-mongo-shard-1:
        image: mongo:7.0
        container_name: db-mongo-shard-1
        hostname: db-mongo-shard-1
        entrypoint: ['bash', '/docker/mongo/entrypoint-shard.sh']
        environment:
            - RS_NAME=shard1ReplSet
            - PORT=27019
        volumes:
            - db_mongo_shard_1:/data/db
            - ./docker/mongo/mongo-keyfile:/etc/mongo-keyfile:ro
            - ./docker/mongo/entrypoint-shard.sh:/docker/mongo/entrypoint-shard.sh:ro
        ports:
            - '27019:27019'
        networks:
            - videonet
        depends_on:
            db-mongo-config-server:
                condition: service_healthy
    db-mongo-shard-2:
        image: mongo:7.0
        container_name: db-mongo-shard-2
        hostname: db-mongo-shard-2
        environment:
            - RS_NAME=shard2ReplSet
            - PORT=27020
        entrypoint: ['bash', '/docker/mongo/entrypoint-shard.sh']
        volumes:
            - db_mongo_shard_2:/data/db
            - ./docker/mongo/mongo-keyfile:/etc/mongo-keyfile:ro
            - ./docker/mongo/entrypoint-shard.sh:/docker/mongo/entrypoint-shard.sh:ro
        ports:
            - '27020:27020'
        networks:
            - videonet
        depends_on:
            db-mongo-config-server:
                condition: service_healthy
    db-video-comments-router:
        image: mongo:7.0
        container_name: db-video-comments-router
        hostname: db-video-comments-router
        entrypoint:
            - bash
            - -c
            - |
                until mongosh --host db-mongo-config-server --port 27018 -u root -p password --authenticationDatabase admin --eval 'db.adminCommand("ping")' --quiet;
                do echo '⏳ Waiting for Config Server...'; sleep 2; done;
                echo '✅ Config Server ready, starting mongos...';
                exec mongos --port 27017 --bind_ip_all --keyFile /etc/mongo-keyfile --configdb configReplSet/db-mongo-config-server:27018
        volumes:
            - ./docker/mongo/mongo-keyfile:/etc/mongo-keyfile:ro
        ports:
            - '27017:27017'
        networks:
            - videonet
        depends_on:
            db-mongo-config-server:
                condition: service_healthy
            db-mongo-shard-1:
                condition: service_healthy
            db-mongo-shard-2:
                condition: service_healthy
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'mongosh --host localhost --port 27017 --eval ''db.adminCommand("ping").ok'' --quiet | grep 1',
                ]
            interval: 5s
            timeout: 5s
            retries: 10
    db-video-comments-router-init:
        image: mongo:7.0
        container_name: db-video-comments-router-init
        entrypoint: ['bash', '/docker/mongo/init-router.sh']
        volumes:
            - ./docker/mongo/init-router.sh:/docker/mongo/init-router.sh:ro
        networks:
            - videonet
        depends_on:
            db-video-comments-router:
                condition: service_healthy

networks:
    videonet:
        driver: bridge

volumes:
    db_data_users_shard_1:
    db_data_users_shard_2:
    db_data_videos:
    db_data_videos_replica:
    db_mongo_config_server:
    db_mongo_shard_1:
    db_mongo_shard_2:
    db_mongo_video_comments:
    redis_data:
    localstack_data:
