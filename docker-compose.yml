version: '3.8'

services:
    app-users:
        build:
            context: .
            dockerfile: docker/users-dockerfile
        ports:
            - '3000:3000'
        environment:
            - USERS_DB_HOST=db-users
            - REDIS_HOST=redis
        env_file:
            - .env
        volumes:
            - .:/app
            - /app/node_modules
            - /app/dist
            - ${HOME}/.aws:/root/.aws:ro
        depends_on:
            db-users:
                condition: service_healthy
            localstack:
                condition: service_healthy
        networks:
            - videonet
    app-videos:
        build:
            context: .
            dockerfile: docker/videos-dockerfile
        ports:
            - '3001:3001'
        environment:
            - VIDEOS_DB_HOST=db-videos
            - REDIS_HOST=redis
        env_file:
            - .env
        volumes:
            - .:/app
            - /app/node_modules
            - /app/dist
            - ${HOME}/.aws:/root/.aws:ro
        depends_on:
            db-videos:
                condition: service_healthy
            localstack:
                condition: service_healthy
        networks:
            - videonet
    db-users:
        image: postgres:15-alpine
        container_name: postgres-users
        restart: unless-stopped
        environment:
            - POSTGRES_USER=${USERS_POSTGRES_USER}
            - POSTGRES_PASSWORD=${USERS_POSTGRES_PASSWORD}
            - POSTGRES_DB=${USERS_POSTGRES_NAME}
        ports:
            - '5432:5432'
        volumes:
            - db_data_users:/var/lib/postgresql/data
        networks:
            - videonet
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${USERS_POSTGRES_USER} -d ${USERS_POSTGRES_NAME} -h localhost || exit 1']
            interval: 5s
            timeout: 3s
            retries: 3
            start_period: 5s
    db-videos:
        image: postgres:15-alpine
        container_name: postgres-videos
        restart: unless-stopped
        environment:
            - POSTGRES_USER=${VIDEOS_POSTGRES_USER}
            - POSTGRES_PASSWORD=${VIDEOS_POSTGRES_PASSWORD}
            - POSTGRES_DB=${VIDEOS_POSTGRES_NAME}
            - PGPORT=5433
        ports:
            - '5433:5433'
        volumes:
            - db_data_videos:/var/lib/postgresql/data
        networks:
            - videonet
        healthcheck:
            test:
                ['CMD-SHELL', 'pg_isready -U ${VIDEOS_POSTGRES_USER} -d ${VIDEOS_POSTGRES_NAME} -h localhost || exit 1']
            interval: 5s
            timeout: 3s
            retries: 3
            start_period: 5s
    redis:
        image: redis:alpine
        container_name: redis
        restart: unless-stopped
        ports:
            - '6379:6379'
        volumes:
            - redis_data:/data
        networks:
            - videonet
    localstack:
        container_name: localstack
        image: localstack/localstack
        restart: unless-stopped
        ports:
            - '4566:4566'
            - '4510-4559:4510-4559'
        environment:
            - SERVICES=events,sqs
            - DEBUG=true
        volumes:
            - './volume:/var/lib/localstack'
            - '/var/run/docker.sock:/var/run/docker.sock'
        networks:
            - videonet
networks:
    videonet:
        driver: bridge

volumes:
    db_data_users:
    db_data_videos:
    redis_data:
